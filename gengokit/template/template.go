// Code generated by go-bindata. DO NOT EDIT.
// sources:
// NAME-service/handlers/handlers.gotemplate (62B)
// NAME-service/handlers/middlewares.gotemplate (75B)
// NAME-service/svc/client/grpc/client.gotemplate (3.184kB)
// NAME-service/svc/client/http/client.gotemplate (105B)
// NAME-service/svc/endpoints.gotemplate (4.865kB)
// NAME-service/svc/transport_grpc.gotemplate (2.962kB)
// NAME-service/svc/transport_http.gotemplate (106B)

package template

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _handlersHandlersGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xc1\x0d\x80\x20\x0c\x05\xd0\xbb\x53\xf4\x4c\xa2\x1d\xc6\x09\x88\x7c\xab\x11\xa9\x69\xeb\x89\xb0\x3b\xaf\x77\x4e\xb4\x03\x24\xba\x86\xfd\xee\x2c\x68\xa2\xcf\x1d\x7c\xe5\x56\x2a\x8c\x03\xef\x57\x73\xc0\x37\x51\x3a\xd5\xe8\xd0\x02\x4a\x3c\xc6\x32\x03\x00\x00\xff\xff\xd6\x21\xab\x2e\x3e\x00\x00\x00")

func handlersHandlersGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_handlersHandlersGotemplate,
		"handlers/handlers.gotemplate",
	)
}

func handlersHandlersGotemplate() (*asset, error) {
	bytes, err := handlersHandlersGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "handlers/handlers.gotemplate", size: 62, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1e, 0xcb, 0xd5, 0x72, 0x80, 0xc6, 0xf9, 0x82, 0x4b, 0xe0, 0x8b, 0x90, 0xb8, 0x9b, 0xbc, 0x5d, 0x8d, 0x12, 0xd4, 0x8e, 0x54, 0xf6, 0x72, 0xcb, 0xef, 0xf5, 0x12, 0xd0, 0xe1, 0xb8, 0x41, 0xc8}}
	return a, nil
}

var _handlersMiddlewaresGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x41\x0e\x02\x21\x0c\x05\xd0\xbd\xa7\xe8\x9a\x44\x7b\x18\x4f\x40\xec\xb7\x12\x81\x4e\xda\x4e\x66\x41\xb8\xfb\xbc\xb5\xb8\xd0\x1b\x20\xb5\x67\xfa\x19\xc1\x8a\xa9\xf6\x6f\xc9\xbf\x3a\xa5\xc3\x83\x13\xe3\xe8\x35\x11\x3c\x9a\x48\xc7\x55\x1d\xf1\x52\xa3\xaf\x39\x7d\x4c\x40\x85\xf7\x7e\xdc\x01\x00\x00\xff\xff\xcf\x9e\xe9\x81\x4b\x00\x00\x00")

func handlersMiddlewaresGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_handlersMiddlewaresGotemplate,
		"handlers/middlewares.gotemplate",
	)
}

func handlersMiddlewaresGotemplate() (*asset, error) {
	bytes, err := handlersMiddlewaresGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "handlers/middlewares.gotemplate", size: 75, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xcc, 0xfe, 0x9d, 0x1a, 0xaf, 0x47, 0xe8, 0x97, 0x82, 0x24, 0x50, 0x17, 0xb4, 0x49, 0x73, 0x3b, 0x68, 0xb7, 0xe5, 0x3a, 0x3d, 0xb6, 0x15, 0x9d, 0xb1, 0x8f, 0xc4, 0x27, 0xaf, 0xa7, 0x3c, 0xc1}}
	return a, nil
}

var _svcClientGrpcClientGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x56\x4d\x6f\xdb\x38\x10\x3d\x8b\xbf\x62\xd6\x08\x16\x52\xa0\xd0\xf7\x2c\x7c\xa9\xd3\x2d\xba\xd8\xa6\x46\x1a\x74\x0f\x45\x51\x30\xd4\x58\x26\x2c\x93\x2a\x49\x3b\x31\x04\xfd\xf7\xc5\x90\x94\x23\x27\x8e\xdb\x43\x10\x8b\xf3\x38\x1f\xef\x0d\x39\x9c\x4e\x61\x6e\x2a\x84\x1a\x35\x5a\xe1\xb1\x82\x87\x3d\x78\xbb\x75\x8e\xc3\xcd\x67\xb8\xfd\x7c\x0f\xef\x6f\x3e\xde\x73\x36\x9d\xc2\x1d\xda\xad\xd6\x4a\xd7\x11\x00\x8f\xaa\x69\xc0\xec\xd0\x3e\x5a\xe5\x11\xfc\x4a\x39\x58\xaa\x06\x03\xf8\x2b\x5a\xa7\x8c\xbe\x86\xae\xe3\xe9\x77\xdf\x8f\x0c\x70\x23\x3c\x8e\xad\xf4\xdd\xf7\x8c\x20\x0b\x21\xd7\xa2\x46\xa8\x6d\x2b\xa1\xb5\x66\xa7\x2a\x74\x20\xa0\xbe\x5b\xcc\x41\x36\x0a\xb5\x87\xa5\xb1\xe0\x57\x48\x0e\xbe\xa0\xdd\x29\x89\xfc\x56\x6c\xb0\xef\xc1\xa5\x4f\xd6\x8e\xdc\x30\xa6\x36\xad\xb1\x1e\x72\x96\x4d\xa4\xd1\x1e\x9f\xfc\x84\x65\x93\xda\x98\xba\x41\x5e\x9b\x46\xe8\x9a\x1b\x5b\x4f\x09\xfd\xb6\x65\xba\x41\x2f\x2a\xe1\x45\x80\x28\xbf\xda\x3e\x70\x69\x36\xd3\x76\x5d\x4f\xd1\x5a\x63\xdd\x84\x1d\x5b\x6a\x73\xb5\x56\x7e\x4a\x7f\xa8\xab\xd6\x28\x4d\x81\xc9\x97\xb7\x42\xbb\x90\xd4\x1b\xf8\x03\x20\x25\xc5\xb2\xe9\x14\xee\x89\xe6\x54\x32\xcb\x26\x5d\xc7\x3f\x86\xca\x16\xc2\xaf\xe0\xaa\xef\x61\xea\x76\x54\x40\xfb\x00\x64\x5c\xbc\x3b\x36\x4f\x58\x11\x38\xbe\xc5\x47\xb0\xe8\xb7\x56\x3b\x10\x7a\x20\x0d\x1e\x84\x5c\xc7\x26\x38\xa6\x5b\x1a\xad\x51\x7a\x65\x34\x87\x8f\x1e\x94\x23\xf2\xc9\x8f\x45\xd7\x1a\xed\xd4\x83\x6a\x94\xdf\x83\x59\x06\x55\xa4\x68\x1a\xb4\xe0\x0d\x54\x4a\x34\x25\x08\x5d\x41\x23\x3c\x5a\x90\x8d\x71\x58\x46\xd0\xb3\x4f\xb6\xdc\x6a\x49\x39\xe5\xb4\x08\x97\x54\x2f\x9f\x87\xd0\x73\xa3\x75\x09\xa6\x25\x9c\x03\xce\xd3\xf2\xe7\xb0\x50\x40\xde\x3e\xf0\x57\x3d\x40\x5f\x68\x4b\x08\x8a\x14\xd0\xb1\x6c\x27\x2c\x48\x99\xaa\x99\x1b\xbd\x54\x35\x63\x19\x35\xd1\x8f\x12\x96\x70\x3d\x03\x2b\x74\x8d\x87\x38\x1d\xcb\x32\xb4\x96\x0c\xcb\xfc\x4f\x29\x0b\x96\x65\x6a\x49\x0e\xe1\x8f\x19\x68\xd5\x04\x44\x16\x19\xa4\xef\x14\xcc\xf1\xff\xac\x68\x73\xb4\xb6\x84\x89\x14\x5a\x1b\x0f\xa2\x6d\x9b\x7d\xf2\x3c\x21\x47\x3d\xcb\x7a\xc6\x32\x39\x2a\xc4\x51\xa4\x6f\xdf\x8f\xda\xe2\xa8\x52\x0a\x77\xca\xfa\x0e\x97\xc6\x62\x4e\xc9\xa4\xb6\xfe\x2a\x9a\x2d\xba\x7b\xf3\xe1\x6e\x31\xff\x94\xba\x35\x97\x92\xaf\x50\x54\x68\x5d\x51\x94\x14\x3e\xeb\xba\x2b\x78\x54\x7e\x05\x17\x1e\x29\x38\xef\x7b\x96\x8d\x56\xdb\x75\x4d\x64\x92\xe9\xc2\x23\x4f\x67\x32\xf2\x4b\xd1\x08\x19\x39\xbb\x50\x03\x68\x50\xe1\x13\xfa\x95\xa9\x5c\x04\x06\xee\xbb\xee\xde\xfc\x6b\x1e\xd1\xc2\x85\x4a\x22\xbd\x4f\xa7\x01\x86\x63\xc1\x87\x95\xb0\x2b\xf0\x4b\x61\xde\xde\x38\x83\x63\x46\x6e\xf1\x31\x92\x92\xc7\xbd\xc4\x88\x2e\xd3\xef\x49\xd7\x0d\x35\xf5\x3d\xef\xba\x71\xbe\x71\x71\x32\x86\xaa\x97\x8b\xef\xb5\x34\x15\x12\xa9\x23\xeb\x1d\xfe\xdc\xa2\xf3\x03\xe6\x06\x4f\x62\xc2\x09\xc1\x01\x14\x1a\xf6\x83\x09\xe4\x5e\x28\x3e\x98\xef\xf7\xed\x90\x48\xd7\x0f\xd8\xa3\x16\xe1\x9c\xa7\xf5\xe2\x40\x55\x5e\x84\x95\xa4\x08\xea\x2a\xa9\x98\x7e\x0d\x3f\xd8\xd0\xa9\x6e\x27\x0f\x7b\x5d\x47\x80\xb1\x86\x2f\x05\xa4\x0b\x23\xb8\x7b\xc5\xfd\x35\x00\x9c\x13\xb5\x7c\x8e\x9d\xf5\x25\x1d\x10\x16\xef\x76\x22\x07\xa2\x4a\x10\xe9\x62\xe7\x73\x88\x53\xe3\x2c\xb3\x74\x1d\x09\x38\xbe\x2d\x79\xdc\x31\x40\xfe\xa6\xfb\xc5\xaf\x44\xb8\xc9\x76\x68\xbd\x03\x41\x7e\xc3\x1d\x77\xa2\x0e\xb0\x48\x87\xd6\x1b\x10\xb0\x75\x68\xaf\x2a\xb3\x11\x4a\xbf\x01\x8d\x31\x38\x2c\xac\xda\x08\xab\x9a\x3d\xed\x59\x6e\x1b\x50\x1a\x44\xba\x74\xd2\x1d\x77\xb6\x90\xfc\x07\xa4\x43\xcc\xe7\xf1\x7f\x19\x5a\xfc\x2e\x24\xa3\xb4\x47\xbb\x14\x12\xbb\xbe\x80\x7c\xf4\x35\xbe\xe8\x62\xde\xd7\xb3\xe7\x7d\x3c\xbf\xfc\x75\xcb\x15\x87\x0e\x09\x0e\x06\xc5\x0e\xfd\xf3\x42\xb9\x78\x18\x7e\x4b\xb9\x73\xe7\xe6\xa4\x70\x71\x43\x42\xbc\xa5\xdb\xaf\x35\x89\x01\x82\x80\x67\x44\x0e\xa8\xdf\x12\xee\x5c\x1d\xa7\x74\x1b\x32\xf8\x4d\xd5\x7e\x86\x19\x94\xf2\x39\xa1\x58\x30\xbc\x21\xd8\xcf\x57\x72\x31\xbf\x6f\xf1\x68\xda\x81\xf3\x76\x2b\x3d\x05\x4b\x83\x00\xbe\x7d\x77\xde\x2a\x5d\xa7\x93\x39\x9e\x36\x51\x18\xaa\x3b\x7c\x05\x01\x36\xa6\x52\x4b\x85\x2e\xce\xee\xc3\xb3\x80\x26\x69\x88\x76\xb4\x9f\xb6\xe6\x97\xe3\x04\x8a\x58\x2e\x8b\x6c\xce\xfd\xd3\x30\xa7\xbe\xa0\xae\xf2\x35\xee\xc3\x70\x8f\x19\x15\xc7\xce\xba\x43\xad\xc1\xad\x81\x53\x8e\xc3\x40\x36\xc3\x94\x83\x19\x90\x4b\x36\x1e\xd1\x34\xf6\xfa\x14\xff\xdc\xac\x0c\xb9\x0c\xe4\x14\x70\x6a\xea\x8e\xbb\xf3\x45\x76\xd2\x3f\xbd\x6e\x86\x4d\x05\x97\xc3\xcb\x91\x7f\xba\x29\x5e\x22\x42\xf2\x34\x27\x5b\xa1\xc6\xca\x64\xc3\x13\x65\xfd\xfc\x44\x09\xe9\x85\xe9\xa8\x96\xb0\x2b\xc1\x04\x9b\xf4\x4f\x3c\x54\x93\xaf\x0b\x9e\xa7\xdc\xff\x22\x63\x1c\xa4\xd1\xf1\x8c\x1e\x23\xc4\x77\xf8\x2c\x61\x5d\xc2\x2e\x4c\x90\x3e\x3c\x4b\xe2\x23\x27\x42\xc7\xcf\x9c\xcb\x4d\x05\x33\x38\x14\xf0\x8f\x51\x3a\xbf\xdc\x54\xe5\xf3\xd2\x82\xf6\x44\xaf\x9c\xf3\xa2\x18\xdc\x25\x66\xa4\x7f\x8a\xec\xff\x1f\x00\x00\xff\xff\x00\xce\x0e\xa6\x70\x0c\x00\x00")

func svcClientGrpcClientGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcClientGrpcClientGotemplate,
		"svc/client/grpc/client.gotemplate",
	)
}

func svcClientGrpcClientGotemplate() (*asset, error) {
	bytes, err := svcClientGrpcClientGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/client/grpc/client.gotemplate", size: 3184, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x63, 0x72, 0x1f, 0xe5, 0x3a, 0x45, 0x1, 0x91, 0xd8, 0x5b, 0xa8, 0x47, 0x45, 0x45, 0x98, 0xee, 0x0, 0xf5, 0xc1, 0x3c, 0x43, 0xf0, 0x86, 0x3c, 0xec, 0xbe, 0x2d, 0x84, 0xed, 0x1a, 0x17, 0x6c}}
	return a, nil
}

var _svcClientHttpClientGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcb\xb1\x0d\xc2\x30\x10\x05\xd0\x3e\x53\x5c\x1d\x09\xdf\x10\x34\x29\x91\xc8\x02\x56\xf8\x98\x88\xc3\x67\x9d\x3f\x95\xe5\xdd\x69\x18\xe0\x8d\xa1\xab\xdc\x01\x29\x7e\x61\x7c\x7b\xd7\x82\x5a\xfc\x7d\x52\x5f\x64\x63\xe4\xda\x9b\x07\x95\xf8\x34\xcb\x44\x2a\x2e\x4f\x0f\x39\xfc\x01\x59\x75\xce\x65\x8c\x23\x9b\x49\xda\xf6\xfd\xb6\xc1\x1a\x22\x5d\xed\x44\xe5\xfe\x27\x92\xe6\x5c\x7e\x01\x00\x00\xff\xff\x0b\x3c\x4c\x9e\x69\x00\x00\x00")

func svcClientHttpClientGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcClientHttpClientGotemplate,
		"svc/client/http/client.gotemplate",
	)
}

func svcClientHttpClientGotemplate() (*asset, error) {
	bytes, err := svcClientHttpClientGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/client/http/client.gotemplate", size: 105, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa1, 0xf0, 0x36, 0xf9, 0x16, 0xea, 0x9d, 0x4e, 0x73, 0x64, 0xc5, 0xad, 0xb3, 0x1b, 0x4, 0xe, 0xd8, 0xc8, 0x1e, 0xf7, 0x7a, 0x39, 0x40, 0x4c, 0xb2, 0x12, 0x83, 0x35, 0xca, 0x82, 0x6f, 0xd0}}
	return a, nil
}

var _svcEndpointsGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\x4d\x6f\xe4\xb8\x11\x3d\x4b\xbf\xa2\xb6\xe1\xc0\xdd\x0b\x59\x7d\xf7\xa2\x0f\xd9\x19\x27\x31\xb0\xe3\x19\xac\x9d\xe4\xb0\x18\x0c\xd8\x52\x75\x8b\x30\x45\x72\x48\xaa\x3f\x22\xe8\xbf\x07\x45\x4a\x6a\xb6\x5b\x76\x3c\x39\x06\x39\x18\xb6\x29\xb2\xf8\xf8\xde\xab\x62\x71\xb9\x84\x0f\xaa\x44\xd8\xa2\x44\xc3\x1c\x96\xb0\x3e\x82\x33\x8d\xb5\x39\x7c\xfc\x0c\x0f\x9f\x9f\xe0\xee\xe3\xfd\x53\x9e\x2e\x97\xf0\x3b\x9a\x46\x4a\x2e\xb7\x61\x02\xec\xb9\x10\xa0\x76\x68\xf6\x86\x3b\x04\x57\x71\x0b\x1b\x2e\xd0\x4f\xfe\x07\x1a\xcb\x95\xbc\x85\xb6\xcd\xfb\xbf\xbb\x2e\xfa\x00\x1f\x99\xc3\xf8\x2b\xfd\xdf\x75\x69\xaa\x59\xf1\xcc\xb6\x08\x76\x57\xa4\x34\xff\x69\x08\x0b\x85\x92\x8e\x71\x69\xa1\x46\x57\xa9\xd2\x82\x53\x50\xb3\x67\x04\x2e\x4b\xbe\xe3\x65\xc3\x04\xa0\x2c\xb5\xe2\xd2\x59\xd8\x18\x55\x83\x45\xb3\xe3\x05\xda\x8c\x22\x19\xfc\xde\xa0\x75\xc0\x64\x09\x06\xad\x56\xd2\x22\xb8\xa3\x46\x1f\x89\xa6\xd2\x21\x94\xc5\x53\x94\x0c\x98\x85\x3d\x0a\x41\xbf\x51\x16\xaa\x44\x63\x29\x00\xc5\x2b\xb1\xff\x7f\xa3\x4c\xbf\xd0\x47\xcb\xfc\x00\x23\x72\x36\xa0\x1a\x03\xb6\xd1\x5a\x19\x22\xd7\x19\x26\x2d\xfd\x4d\xdb\x71\x26\xf8\xbf\x98\xe3\x4a\x52\xb4\x8d\x32\x35\x73\x36\x4f\x53\x5e\xfb\x19\xf3\x34\x99\x6d\x6a\x37\x4b\x93\x19\x9d\x1c\x0f\x6e\x96\xa6\xc9\x6c\xcb\x5d\xd5\xac\xf3\x42\xd5\xcb\xad\xba\x79\xe6\x6e\x49\x3f\x03\x62\x9a\xa2\xd7\x30\x6b\xdb\xfc\xcb\xaf\xf7\x3e\xd0\x17\xe6\x2a\xb8\xe9\xba\x59\xba\xf0\x84\xde\x8d\x14\x15\x4a\x08\x2c\x9c\x1d\xb0\xba\x2a\x3a\x3a\xb8\x8a\x39\x28\x54\xad\xe9\x60\x4c\x02\x2b\xcb\x81\xcf\x1c\xee\xdd\xb5\xa5\x60\x35\x32\xe9\x88\xbe\x35\x42\x63\xb1\x24\x9e\x18\x54\x28\x34\x1a\xb0\xce\x34\x85\xcb\xe8\x73\xbf\xd5\xf4\x4e\x5c\x3a\x05\x8c\xc2\x59\x2e\xb7\x02\x41\x33\xc3\x6a\x74\x68\xc8\x4a\x34\x7e\x2f\x81\x05\x85\x4c\x06\xdc\x5d\x5b\xda\x6c\xd3\x08\xcf\xf4\xa6\x91\x05\xb1\xd8\x43\x96\x48\x44\x2b\x50\xda\x3b\x1a\x14\xad\xd5\x68\x6e\x86\x0d\x29\xe0\x9a\x59\x6e\x73\xf8\x8b\x32\x80\x07\x56\x6b\x81\x19\x1c\x55\x03\x35\xdf\x56\x0e\x34\xb3\xa4\x72\x44\x15\x01\x1c\x37\x0a\xfb\x68\xa3\xca\xa6\x40\x4f\x03\x93\x50\x39\xa7\xf3\xbf\x31\x59\x0a\xc2\xb8\xe7\xae\x02\x64\x45\xd5\x9b\x15\xe6\xc3\xee\x0b\xd8\x73\x83\x25\x34\x3a\x04\xb5\x1a\x0b\xbe\xe1\x05\x68\xe6\xaa\x1c\xe6\xf7\x1e\x1f\xb7\x14\x7f\xcd\xd6\xe2\x08\x0c\x6a\x6e\x5d\x30\x3a\x94\x68\xf9\x56\xd2\x52\x2e\x77\xea\x19\x3d\x95\x8f\x41\x96\x31\x31\x3c\x44\x3c\x17\x3b\x88\x41\x21\x06\x26\xf3\x45\xcc\x6e\x21\x38\x4a\x77\xce\x6e\x24\xdc\x29\xc7\xc4\x91\x32\x31\x84\xc3\xf2\x2d\x19\x29\x1b\x02\x57\x9c\x18\xae\x31\xd8\xea\x84\x97\x4b\x87\x66\xc3\xc8\x50\xd3\x4a\x50\xb0\x71\xb3\xe9\x3c\x6f\x6c\xa8\x48\x7d\x62\x2d\xbd\x0e\x0f\xb8\xff\xd0\x9f\xa7\x50\xf5\x9a\x4b\xcf\x53\xdd\x43\x8c\x84\xcd\xfa\x6a\xe0\x1a\x23\x81\x7b\x27\x13\xc0\x82\x09\x81\x26\x98\xb9\x07\x9b\xa7\xfe\x38\x17\x84\xb6\x69\xdb\x1a\x26\xb7\x08\x57\x1c\x6e\x57\x90\x0f\xf3\x3f\x05\x31\xba\x2e\x4d\xda\xf6\x8a\xe7\x0f\xac\xc6\xae\x1b\xd6\x03\xc0\x78\x88\x7c\x18\x4c\xdb\xf6\x86\x46\xbb\x2e\xed\xd2\x94\xec\x06\x0f\xb8\x1f\xb7\x9c\xf7\xe9\x07\x7a\x9d\xb7\xed\xb8\x51\x08\xfc\xe8\x35\x5d\x44\x00\xdb\x34\x59\x2e\xe1\x57\x22\x08\xad\x85\x52\xd5\x8c\xcb\x3c\xf5\xa3\xff\x34\x4c\x8f\x32\x78\xb3\xd6\xbc\x2c\x05\xee\x99\x41\x9b\xc3\x23\x22\x54\xc1\xcb\x76\x19\x7f\xd9\xaa\x34\x19\x50\xac\xc6\x29\x39\x85\xeb\xa3\x0d\x20\x17\x61\xa3\xf1\xbc\xc3\xf6\xc9\x8e\x19\xaa\x6d\x6f\xb3\x46\x05\x2b\x4d\x92\xb6\x7d\x52\xbf\xa9\x3d\x1a\xb8\x24\x70\x45\x57\x44\xfe\x89\x3d\xe3\x04\xbd\x27\x14\x49\xdb\x06\x46\x13\x42\x74\xf2\xcd\x6d\x58\x3f\xd2\xd5\xbe\x1b\xd2\xc5\x66\xb7\x24\xe6\x1b\x50\xb3\x08\x44\x17\xf1\x6f\x91\x52\x0b\xcb\x48\xb3\x1f\x94\xe2\x74\x9c\x17\x62\x9c\x3c\x33\x4e\xa1\xe3\xf7\x46\x1f\xc7\xc8\x66\x71\x95\x78\x87\x97\xbd\x2b\xe7\x51\x22\x2c\x20\xa2\x64\x5e\xb8\x03\xf4\xd7\x55\xfe\x21\xfc\xce\xa8\xe8\xfc\xec\x3d\xfb\x57\x45\xd3\x88\xa1\xdf\xc3\x65\xfc\x74\xd4\x83\x81\x17\x30\xbf\x9c\x14\x6e\xe9\x68\x56\x06\x68\x8c\x32\x0b\x72\x77\x32\xdc\xe2\x7e\x90\x00\x63\x3e\xe5\x85\xc2\x1d\x08\xc3\x22\x4d\x12\xbe\xf1\x53\x7f\x5a\x81\xe4\xc2\xc7\x18\x38\x91\x5c\xf8\x30\x69\x92\x74\xe9\x38\x3a\xec\x90\xbf\x07\xdb\x22\xa3\x28\xa4\xf1\x20\x37\x91\x4b\x0e\x3d\x63\xd8\x6b\x7c\xe5\xd0\x33\x1c\xca\x43\x4c\xfa\x95\xc3\x29\xde\x03\xf1\xaf\xda\x3d\xd4\x84\x78\xed\x79\x59\xb8\xa8\x35\x67\x87\xa7\xd8\xd3\xd2\x0d\x4d\xd3\x58\xaa\x5b\x12\x6a\x6c\x9f\xa2\xe1\x20\x42\xa4\x0e\x45\xff\x4e\x27\xea\x63\x4c\x71\x78\x61\x02\xbf\x6e\x37\x0a\x6a\xf3\x17\xe6\xf2\x88\xc2\xac\x09\x2d\xa7\xd4\x0c\x7a\x8e\x5f\x76\xbd\x48\x61\xb8\x3b\xa5\x66\xac\x19\xa5\xd0\x9f\x85\xb8\x3b\x14\xa8\x1d\xec\x0d\xd3\x36\xdc\xe6\x23\x7b\x1b\x8e\xa2\xa4\x56\xa6\xbf\x06\x5e\xa4\xb0\xbf\x06\x27\xfa\xb3\xfc\xd3\x98\xc1\xbe\x4d\xfe\xbb\x1d\x1a\x67\x6a\x19\xb5\x16\x47\xba\xcd\xe8\x86\x76\x14\x3c\xca\x77\xba\x9a\x70\x87\xe6\x38\x4a\x49\x69\x45\x97\xd5\xd0\x94\x51\xbc\xcf\x9a\x1a\x14\xba\xa4\xb3\xe8\x8e\x2c\x98\xa4\x06\x8d\xda\x1a\x2c\x69\xd9\xfa\x08\x92\x34\x08\x8d\x1b\x1e\x0a\xd1\x94\x58\x86\x9e\x79\x8d\x04\x81\xce\xac\xb1\xcc\x2f\xd8\x98\x9f\x30\x65\x30\x7b\x74\xcc\x35\x76\x96\xc1\xec\x0b\x97\xdb\xd9\x22\x1d\xca\xc3\xcf\x51\x7d\x78\x6d\x3d\x4c\xb0\x92\x9d\xd0\xe4\x79\x6e\x9d\xe1\x72\xeb\xed\xc4\x65\x3f\x7c\xbb\x82\x9a\xe9\x3f\xc2\xa7\xaf\x81\xfe\xb6\x6b\x7d\x69\xbe\x81\xff\x54\xbe\x92\x64\x16\x39\x6a\x76\x0b\x6d\x97\xf5\x4b\xa3\x0a\x4d\x6a\x7c\x23\x28\xde\xbe\x3e\xe4\x08\xab\x0d\x65\xe4\x5b\x06\xea\x99\x3e\x0f\xc0\xfe\xc0\xc3\xd7\x5f\xe0\x27\xf5\x1c\xac\xa8\x99\xe4\xc5\x7c\x53\xbb\xfc\x51\x1b\x2e\xdd\x66\x3e\xbb\x1b\x42\x8c\x0a\x5e\xff\xc9\x5e\x43\xa9\xd0\x82\x54\x0e\xf0\xc0\xad\xfb\x05\x2c\x62\x2c\xfc\xe8\x1d\x2a\xf9\x33\x02\xb5\x58\xf4\x45\xaa\x44\x81\x0e\xe7\x03\x02\xff\xed\x74\x00\x2e\x8b\x13\xfc\x91\xbe\xf7\x13\xc5\x37\x3e\xc4\x6a\x05\x67\x94\xf5\x99\x36\x59\x6a\x61\x15\x21\x9f\x4f\x4e\x59\x0c\xa9\x77\x46\x79\x48\xbb\xdf\xd8\x1a\x05\x96\x27\x37\x84\x37\xe6\x16\xdd\xe0\xdd\xf8\xe1\x10\x2c\xbc\xaf\x50\x8e\x5f\x55\x64\xd7\x3e\x58\x70\x5d\x16\xb2\xac\x4f\x84\x26\x4c\x86\xf0\x70\x65\xe1\xf5\xcb\x0b\xea\x9f\x0d\x2f\xc2\xc3\x26\xc2\x50\xf1\xa2\xf2\x4b\x2d\xca\x29\x08\x7d\xd3\xd8\xaf\x1e\x5a\x66\x65\xfa\x96\xf1\xf2\x54\xbe\xdc\x06\x03\x67\x97\x95\x79\xa2\x58\xa7\xaf\x9d\xeb\xbf\xae\x4d\x17\xa0\xb2\xfe\x9c\x9e\x71\x83\x05\xf2\x5d\x78\x5c\xf8\x23\xbe\x78\xb3\xf9\xb6\x64\x0c\x13\x45\x09\xfd\x4a\xff\xe6\x19\xf3\x9e\x80\x92\x23\x4b\x74\x8c\x0b\xff\x3e\x19\xd2\xc9\x3f\x7d\xfb\x77\x15\x13\xdc\x1d\xf3\xb7\x4a\xc8\xd9\xd9\xe3\x4a\xf2\xc3\x8c\xfe\xbf\xce\xfc\xef\xd4\x99\xb3\x65\xd9\x74\x13\xf8\x5a\xd9\xf9\x77\x00\x00\x00\xff\xff\xbd\x96\x70\x2b\x01\x13\x00\x00")

func svcEndpointsGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcEndpointsGotemplate,
		"svc/endpoints.gotemplate",
	)
}

func svcEndpointsGotemplate() (*asset, error) {
	bytes, err := svcEndpointsGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/endpoints.gotemplate", size: 4865, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe, 0x7f, 0x1e, 0x9c, 0xd3, 0xaf, 0x39, 0x87, 0x8a, 0xeb, 0x20, 0xb3, 0xe5, 0xef, 0xf8, 0x92, 0xc5, 0x1c, 0x58, 0xe8, 0xbe, 0x4e, 0x55, 0xcd, 0x55, 0xfb, 0x5c, 0x83, 0x4f, 0xd6, 0x79, 0x60}}
	return a, nil
}

var _svcTransport_grpcGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x56\x4d\x6f\xdb\x38\x10\x3d\x8b\xbf\x62\xd6\x28\x16\x56\xe1\xd0\x7b\x0e\x90\x4b\x93\x6e\x5b\xec\xe6\x03\x59\xa3\x7b\x28\x8a\x82\x96\xc6\x12\x61\x89\x54\x48\xca\x89\x97\xd0\x7f\x5f\x0c\xf5\x61\x39\x76\x1c\x1f\x0c\x58\xe4\xe3\xcc\x9b\xf7\x86\x23\xcd\xe7\x70\xad\x53\x84\x0c\x15\x1a\xe1\x30\x85\xe5\x16\x9c\xa9\xad\xe5\x70\x73\x0f\x77\xf7\x0b\xf8\x7c\xf3\x6d\xc1\xd9\x7c\x0e\x8f\x68\x6a\xa5\xa4\xca\x5a\x00\x3c\xcb\xa2\x00\xbd\x41\xf3\x6c\xa4\x43\x70\xb9\xb4\xb0\x92\x05\x06\xf0\x77\x34\x56\x6a\x75\x09\xde\xf3\xee\x7f\xd3\x8c\x36\xe0\x46\x38\x1c\xef\xd2\x73\xd3\x30\x56\x89\x64\x2d\x32\x04\xbb\x49\x18\xe1\x17\x7d\x58\xa8\x8c\xde\xc8\x14\x2d\x58\x34\x1b\x34\x17\x56\xa6\x08\x4b\xa9\x52\xa9\x32\x0b\x2b\x6d\xc0\xe5\x08\xd9\xe3\xc3\x35\x38\x23\x94\xad\xb4\x71\x81\xcb\x37\x07\xb5\x93\x85\xfc\x0f\x6d\x80\x0c\xbb\xf3\xcc\x54\x09\xff\x27\x84\xe3\x8c\xc9\x92\x16\x61\xca\xa2\x89\x42\x37\xcf\x9d\xab\x26\x2c\x9a\x24\x5a\x39\x7c\x71\x13\xc6\xa2\x49\xa6\x75\x56\x20\xcf\x74\x21\x54\xc6\xb5\xc9\x42\x88\x79\x89\x4e\xa4\xc2\x09\xc2\xd0\xc2\x90\x01\x26\x99\x74\x79\xbd\xe4\x89\x2e\xe7\x99\xbe\x58\x4b\x37\xa7\xdf\x3e\x05\x3a\xd6\x97\x4a\x6c\x64\x82\x2c\xaa\x96\x30\xf1\x9e\x3f\x7c\xfa\x16\x68\x3d\x08\x97\xc3\x45\xd3\x4c\x58\x1c\x74\xb9\x15\x6b\xfc\xf2\xf8\x70\xdd\xb2\x87\x52\xac\xd1\x82\x00\x8b\x0e\xf4\x0a\x50\xa5\x95\x96\xca\x59\x10\x1b\x21\x0b\xb1\x2c\x10\x04\xed\x07\x79\xbc\xe7\x5d\x1a\x7e\x27\x4a\x6c\x9a\x5e\x82\x55\xad\x92\x57\x91\xa7\xbb\x50\x9f\xfb\x7f\x33\xd0\x95\x93\x5a\x59\xe0\x9c\xef\xd5\xdb\x89\x79\x1f\xb6\x63\xa8\x96\xfc\x8d\x5c\xe0\x59\x64\x47\x58\x0b\x97\x57\xf0\xe3\xe7\xdb\xc1\x3c\x8b\xa2\x63\xbb\x9f\x70\xa5\x0d\x4e\x7b\x07\x16\xfa\xba\xb5\x2b\x9e\xb1\xa8\x79\x9d\xe3\x0a\x44\x55\xa1\x4a\xa7\x7b\xcb\x43\x39\x9c\xf3\x98\x45\x06\x5d\x6d\x14\xfc\x4e\xd9\xda\x1c\x3e\xd8\xe3\x3d\x2c\xf4\xdf\xfa\x19\x0d\xec\x95\x04\x4d\xc3\x22\xef\x8d\x50\x19\xc2\x07\x49\x85\x0c\xfb\xb7\xe8\x72\x9d\x5a\x42\x44\xde\xf7\xc7\x3f\xc8\x4e\x8b\x4b\xd8\x2f\xe9\x0e\x9f\x3b\xd5\x59\x14\x45\x83\xf2\xdc\xfb\xe1\x48\x6f\xc2\x8c\x10\x37\x98\xe8\x34\x98\x35\x42\x3c\xe2\x53\x8d\xb6\x05\x7c\x56\x47\x01\xb6\xd2\xca\x62\x40\xec\x29\xc1\x39\xa7\x45\xd2\xce\xfb\x0b\xea\x22\x62\xde\xb0\x26\xb4\xdc\x4e\x10\x90\x65\x55\x60\x89\xd4\x15\x74\xa3\xbc\xff\xa2\x83\x14\xc7\xbd\x96\xca\xa1\x59\x89\x04\x99\xdb\x56\x38\x8e\x63\x9d\xa9\x13\x07\x9e\xbd\xaf\xdf\x11\xf9\x00\x5e\xe9\xf7\x55\xa8\xb4\x40\xc3\x76\xe4\x5b\xe6\x5d\x98\x30\x24\x46\xd9\x9d\xde\x15\x72\x7e\x0d\xef\x52\x0d\xb7\x68\x6a\xe1\xe3\x2e\x55\xbc\x0b\x3f\xb0\x9f\x26\xee\x05\xba\xe1\xc2\xbb\xae\x9d\x81\xc1\x27\xf8\x18\xee\xcd\x0e\xdf\x39\xba\xd8\x56\x3d\xa9\x18\xa6\x87\xa0\xd6\xd5\x11\x6a\x06\x68\x8c\xa6\xe4\x2c\xfa\x45\xa1\xab\xb0\x42\xb4\xa9\xa7\x0e\xf4\x6c\xaf\x14\x75\x0b\x71\x0b\x5c\x62\x16\xc9\x55\x38\xf4\xdb\x15\x28\x59\x50\xa8\xfe\x86\x28\x59\x84\x78\xe1\xa2\x75\x6b\x06\x2b\x7e\x0e\xb5\x78\x46\xc7\x59\xc3\xbc\x6f\x8d\x22\x9b\x3a\xa9\xdb\xae\x7e\x5f\xe7\xf9\x1c\x4e\x5d\x00\x90\x34\xf0\x5e\x0d\xfb\xf6\x40\x87\xf8\x93\x8c\x72\xb9\x70\x64\xc3\x06\x0d\x8d\xcb\xd0\xe8\xed\x90\x3c\xec\x37\xd3\x45\x76\x1a\x04\xd4\x16\xcd\x45\xaa\x4b\x21\xd5\x29\x30\x87\x07\x23\x4b\x61\x64\xb1\xa5\x23\xab\xba\x00\xa9\xc2\xa4\x1e\xcd\xdc\x53\x75\x4c\x7f\x1d\x76\x09\xd5\xf2\x88\x4f\xbb\xae\xf4\xd4\x12\xa3\xa7\xb1\xf5\xd4\x52\x97\x57\xfd\x99\x63\xf6\x1c\xb4\xd7\xc8\xcf\xa7\x13\x4e\xb5\xe3\xe5\x2c\xa7\x4e\x4e\xa2\xa3\x56\xb5\x27\x7a\xc8\x5b\x5e\xbd\xef\x42\x97\x22\x78\x76\xc2\xd9\xaa\xd8\x9e\x65\xd5\xc9\x42\x8e\x79\x35\x30\x38\xd3\x2c\x5b\x91\x8a\xfd\xa9\xf3\x6e\xd3\xc8\x2f\x5b\x1d\x33\xec\x2b\x16\x15\x1a\xcb\xda\x1a\x0e\xde\x96\xc7\x67\x51\x99\x0e\x48\x7e\x7b\x13\xbf\x06\x10\x5d\x9a\xa8\xeb\x19\x6c\x02\xe5\xd0\x04\x65\x1a\x66\x84\x5c\xc1\x66\x3c\x33\xda\x0f\x1c\x84\x35\x6e\x83\xdb\x69\x4a\x1f\x9b\xda\xe5\x24\x71\x9f\x85\x06\x74\x29\x1c\x4c\xd7\x31\x3c\xe7\x32\xc9\x03\xb4\x28\xa0\x20\xbb\xba\x28\x42\xa5\xe1\xa5\x43\xdf\x67\xfc\x5a\x28\xad\x64\x22\x8a\xaf\x28\x52\x34\x7f\xe1\x96\x3e\x7f\x5c\x97\xc8\xea\xb6\x65\xa4\x83\x44\x28\x58\x62\x1f\x22\x49\xd0\x5a\x4c\x29\x37\x4a\x97\xa3\xe9\x32\xd3\x3e\x49\x71\x35\xd4\xfa\xaf\x74\xf9\x77\x51\xd4\xd8\x8e\x44\xaa\xf5\xc7\x1f\x3f\xe3\x77\x81\x6f\xb0\x9b\xae\xe3\x5d\x84\xf0\x6e\x1d\xac\x4b\xdc\x0b\x6b\xd8\xff\x01\x00\x00\xff\xff\x71\x92\xdd\x9a\x92\x0b\x00\x00")

func svcTransport_grpcGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcTransport_grpcGotemplate,
		"svc/transport_grpc.gotemplate",
	)
}

func svcTransport_grpcGotemplate() (*asset, error) {
	bytes, err := svcTransport_grpcGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/transport_grpc.gotemplate", size: 2962, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa2, 0xc7, 0xff, 0xf, 0x16, 0xfd, 0xd8, 0x43, 0xfc, 0x25, 0x2b, 0x9c, 0xfe, 0x3c, 0xf, 0x3a, 0x3e, 0xc7, 0x21, 0xdf, 0x32, 0x41, 0x25, 0x39, 0x7d, 0x4b, 0xb6, 0xc2, 0xc, 0x27, 0x81, 0x3c}}
	return a, nil
}

var _svcTransport_httpGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcb\xb1\x0d\xc2\x30\x10\x05\xd0\x3e\x53\x5c\x1d\x09\xdf\x1a\x29\x91\xe2\x05\xac\xf0\x31\x08\x93\xb3\xce\x1f\x1a\xeb\x76\xa7\x61\x80\x37\xa7\xae\xb2\x03\x52\xed\x42\xff\x8c\xa1\x15\x67\xb5\xd7\x93\xfa\x20\x3b\xbd\x9c\xa3\x9b\x53\x89\x77\x6f\x85\x18\xa9\x9a\xdc\xcd\xe5\xb0\x1b\x64\xd5\x88\x65\xce\xa3\xb4\x26\x69\xcb\xf9\xba\xa1\x75\x78\xda\xe1\x5f\x78\xfe\x1b\x49\x11\xcb\x2f\x00\x00\xff\xff\xdd\x3a\x4a\x8f\x6a\x00\x00\x00")

func svcTransport_httpGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_svcTransport_httpGotemplate,
		"svc/transport_http.gotemplate",
	)
}

func svcTransport_httpGotemplate() (*asset, error) {
	bytes, err := svcTransport_httpGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "svc/transport_http.gotemplate", size: 106, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x52, 0x57, 0x56, 0xc6, 0xb4, 0xe5, 0x1f, 0xf4, 0x1d, 0xa5, 0xda, 0x23, 0xea, 0x8f, 0xfb, 0xff, 0xae, 0x4b, 0x12, 0xe4, 0xf6, 0xbf, 0x11, 0xa6, 0x4, 0x83, 0x53, 0xfd, 0xbf, 0xce, 0x4a, 0x47}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"handlers/handlers.gotemplate":      handlersHandlersGotemplate,
	"handlers/middlewares.gotemplate":   handlersMiddlewaresGotemplate,
	"svc/client/grpc/client.gotemplate": svcClientGrpcClientGotemplate,
	"svc/client/http/client.gotemplate": svcClientHttpClientGotemplate,
	"svc/endpoints.gotemplate":          svcEndpointsGotemplate,
	"svc/transport_grpc.gotemplate":     svcTransport_grpcGotemplate,
	"svc/transport_http.gotemplate":     svcTransport_httpGotemplate,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"handlers": &bintree{nil, map[string]*bintree{
		"handlers.gotemplate":    &bintree{handlersHandlersGotemplate, map[string]*bintree{}},
		"middlewares.gotemplate": &bintree{handlersMiddlewaresGotemplate, map[string]*bintree{}},
	}},
	"svc": &bintree{nil, map[string]*bintree{
		"client": &bintree{nil, map[string]*bintree{
			"grpc": &bintree{nil, map[string]*bintree{
				"client.gotemplate": &bintree{svcClientGrpcClientGotemplate, map[string]*bintree{}},
			}},
			"http": &bintree{nil, map[string]*bintree{
				"client.gotemplate": &bintree{svcClientHttpClientGotemplate, map[string]*bintree{}},
			}},
		}},
		"endpoints.gotemplate":      &bintree{svcEndpointsGotemplate, map[string]*bintree{}},
		"transport_grpc.gotemplate": &bintree{svcTransport_grpcGotemplate, map[string]*bintree{}},
		"transport_http.gotemplate": &bintree{svcTransport_httpGotemplate, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
