// Code generated by go-bindata. DO NOT EDIT.
// sources:
// NAME-service/gen/client/grpc/client.gotemplate (3.188kB)
// NAME-service/gen/client/http/client.gotemplate (105B)
// NAME-service/gen/endpoints.gotemplate (4.609kB)
// NAME-service/gen/transport_grpc.gotemplate (3.146kB)
// NAME-service/gen/transport_http.gotemplate (106B)
// NAME-service/service.gotemplate (62B)

package template

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _genClientGrpcClientGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x56\x4d\x6f\xdb\x38\x10\x3d\x8b\xbf\x62\xd6\x08\x16\x52\xa0\xd0\xf7\x2c\x7c\xa9\xd3\x2d\xba\xd8\xa6\x46\x1a\x74\x0f\x45\x51\x30\xd4\x58\x26\x2c\x93\x2a\x49\x3b\x31\x04\xfd\xf7\xc5\x90\x94\x23\x27\x8e\xdb\x43\x10\x8b\xf3\x38\x1f\xef\x0d\x39\x9c\x4e\x61\x6e\x2a\x84\x1a\x35\x5a\xe1\xb1\x82\x87\x3d\x78\xbb\x75\x8e\xc3\xcd\x67\xb8\xfd\x7c\x0f\xef\x6f\x3e\xde\x73\x36\x9d\xc2\x1d\xda\xad\xd6\x4a\xd7\x11\x00\x8f\xaa\x69\xc0\xec\xd0\x3e\x5a\xe5\x11\xfc\x4a\x39\x58\xaa\x06\x03\xf8\x2b\x5a\xa7\x8c\xbe\x86\xae\xe3\xe9\x77\xdf\x8f\x0c\x70\x23\x3c\x8e\xad\xf4\xdd\xf7\x8c\x20\x0b\x21\xd7\xa2\x46\xa8\x6d\x2b\xa1\xb5\x66\xa7\x2a\x74\x20\xa0\xbe\x5b\xcc\x41\x36\x0a\xb5\x87\xa5\xb1\xe0\x57\x48\x0e\xbe\xa0\xdd\x29\x89\xfc\x56\x6c\xb0\xef\xc1\xa5\x4f\xd6\x8e\xdc\x30\xa6\x36\xad\xb1\x1e\x72\x96\x4d\xa4\xd1\x1e\x9f\xfc\x84\x65\x93\xda\x98\xba\x41\x5e\x9b\x46\xe8\x9a\x1b\x5b\x4f\x09\xfd\xb6\x65\xba\x41\x2f\x2a\xe1\x45\x80\x28\xbf\xda\x3e\x70\x69\x36\xd3\x76\x5d\x4f\xd1\x5a\x63\xdd\x84\x1d\x5b\x6a\x73\xb5\x56\x7e\x4a\x7f\xa8\xab\xd6\x28\x4d\x81\xc9\x97\xb7\x42\xbb\x90\xd4\x1b\xf8\x03\x20\x25\xc5\xb2\xe9\x14\xee\x89\xe6\x54\x32\xcb\xdc\x4e\xc2\xa4\xeb\xf8\xc7\x50\xdd\x42\xf8\x15\x5c\xf5\x3d\x4c\x6b\xd4\x13\x96\xb5\x0f\xc1\xb8\x78\x77\x6c\x9e\xb0\x22\xf0\x7c\x8b\x8f\x60\xd1\x6f\xad\x76\x20\xf4\x40\x1c\x3c\x08\xb9\x8e\x8d\x70\x4c\xb9\x34\x5a\xa3\xf4\xca\x68\x0e\x1f\x3d\x28\x47\x02\x90\x1f\x8b\xae\x35\xda\xa9\x07\xd5\x28\xbf\x07\xb3\x0c\xca\x48\xd1\x34\x68\xc1\x1b\xa8\x94\x68\x4a\x10\xba\x82\x46\x78\xb4\x20\x1b\xe3\xb0\x8c\xa0\x67\x9f\x6c\xb9\xd5\x92\x72\xca\x69\x11\x2e\xa9\x66\x3e\x0f\xa1\xe7\x46\xeb\x12\x4c\x4b\x38\x07\x9c\xa7\xe5\xcf\x61\xa1\x80\xbc\x7d\xe0\xaf\xfa\x80\xbe\xd0\x96\x10\x54\x29\xa0\x63\xd9\x4e\x58\x90\x32\x55\x33\x37\x7a\xa9\x6a\xc6\x32\x6a\xa4\x1f\x25\x2c\xe1\x7a\x06\x56\xe8\x1a\x0f\x71\x3a\x96\x65\x68\x2d\x19\x96\xf9\x9f\x52\x16\x2c\xcb\xd4\x92\x1c\xc2\x1f\x33\xd0\xaa\x09\x88\x2c\x32\x48\xdf\x29\x98\xe3\xff\x59\xd1\xe6\x68\x6d\x09\x13\x29\xb4\x36\x1e\x44\xdb\x36\xfb\xe4\x79\x42\x8e\x7a\x96\xf5\x8c\x65\x72\x54\x88\xa3\x48\xdf\xbe\x1f\xb5\xc6\x51\xa5\x14\xee\x94\xf5\x1d\x2e\x8d\xc5\x9c\x92\x49\xad\xfd\x55\x34\x5b\x74\xf7\xe6\xc3\xdd\x62\xfe\x29\x75\x6c\x2e\x25\x5f\xa1\xa8\xd0\xba\xa2\x28\x29\x7c\xd6\x75\x57\xf0\xa8\xfc\x0a\x2e\x3c\x52\x70\xde\xf7\x2c\x1b\xad\xb6\xeb\x9a\xc8\x24\xd3\x85\x47\x9e\xce\x65\xe4\x97\xa2\x11\x32\x72\x76\xa1\x06\xd0\xa0\xc2\x27\xf4\x2b\x53\xb9\x08\x0c\xdc\x77\xdd\xbd\xf9\xd7\x3c\xa2\x85\x0b\x95\x44\x7a\x9f\x4e\x04\x0c\x47\x83\x0f\x2b\x61\x57\xe0\x97\xc2\xbc\xbd\x71\x06\xc7\x8c\xdc\xe2\x63\x24\x25\x8f\x7b\x89\x11\x5d\xa6\xdf\x93\xae\x1b\x6a\xea\x7b\xde\x75\xe3\x7c\xe3\xe2\x64\x0c\x55\x2f\x17\xdf\x6b\x69\x2a\x24\x52\x47\xd6\x3b\xfc\xb9\x45\xe7\x07\xcc\x0d\x9e\xc4\x84\x13\x82\x03\x28\x34\xec\x07\x13\xc8\xbd\x50\x7c\x30\xdf\xef\xdb\x21\x91\xae\x1f\xb0\x47\x2d\xc2\x39\x4f\xeb\xc5\x81\xaa\xbc\x08\x2b\x49\x11\xd4\x55\x52\x31\xfd\x1a\x7e\xb0\xa1\x53\xdd\x4e\x1e\xf6\xba\x8e\x00\x63\x0d\x5f\x0a\x48\x17\x46\x70\xf7\x8a\xfb\x6b\x00\x38\x27\x6a\xf9\x1c\x3b\xeb\x4b\x3a\x20\x2c\xde\xef\x44\x0e\x44\x95\x20\xd2\xc5\xce\xe7\x10\x27\xc7\x59\x66\xe9\x3a\x12\x70\x7c\x63\xf2\xb8\x63\x80\xfc\x4d\xf7\x8b\x5f\x89\x70\x93\xed\xd0\x7a\x07\x82\xfc\x86\x3b\xee\x44\x1d\x60\x91\x0e\xad\x37\x20\x60\xeb\xd0\x5e\x55\x66\x23\x94\x7e\x03\x1a\x63\x70\x58\x58\xb5\x11\x56\x35\x7b\xda\xb3\xdc\x36\xa0\x34\x88\x74\xe9\xa4\x3b\xee\x6c\x21\xf9\x0f\x48\x87\x98\xcf\xe3\xff\x32\xb4\xf8\x5d\x48\x46\x69\x8f\x76\x29\x24\x76\x7d\x01\xf9\xe8\x6b\x7c\xd1\xc5\xbc\xaf\x67\xcf\xfb\x78\x7e\xf9\xeb\x96\x2b\x0e\x1d\x12\x1c\x0c\x8a\x1d\xfa\xe7\x85\x72\xf1\x30\xfc\x96\x72\xe7\xce\xcd\x49\xe1\xe2\x86\x84\x78\x4b\xb7\x5f\x6b\x12\x03\x04\x01\xcf\x88\x1c\x50\xbf\x25\xdc\xb9\x3a\x4e\xe9\x36\x64\xf0\x9b\xaa\xfd\x0c\x33\x28\xe5\x73\x42\xb1\x60\x78\x43\xb0\x9f\xaf\xe4\x62\x7e\xdf\xe2\xd1\xb4\x03\xe7\xed\x56\x7a\x0a\x96\x06\x01\x7c\xfb\xee\xbc\x55\xba\x4e\x27\x73\x3c\x6d\xa2\x30\x54\x77\xf8\x0a\x02\x6c\x4c\xa5\x96\x0a\x5d\x9c\xdd\x87\x67\x01\x4d\xd2\x10\xed\x68\x3f\x6d\xcd\x2f\xc7\x09\x14\xb1\x5c\x16\xd9\x9c\xfb\xa7\x61\x4e\x7d\x41\x5d\xe5\x6b\xdc\x87\xe1\x1e\x33\x2a\x8e\x9d\x75\x87\x5a\x83\x5b\x03\xa7\x1c\x87\x81\x6c\x86\x29\x07\x33\x20\x97\x6c\x3c\xa2\x69\xec\xf5\x29\xfe\xb9\x59\x19\x72\x19\xc8\x29\xe0\xd4\xd4\x1d\x77\xe7\x8b\xec\xa4\x7f\x7a\xdd\x0c\x9b\x0a\x2e\x87\xd7\x23\xff\x74\x53\xbc\x44\x84\xe4\x69\x4e\xb6\x42\x8d\x95\xc9\x86\x27\xca\xfa\xf9\x89\x12\xd2\x0b\xd3\x51\x2d\x61\x57\x82\x09\x36\xe9\x9f\x78\xa8\x26\x5f\x17\x3c\x4f\xb9\xff\x45\xc6\x38\x48\xa3\xe3\x19\x3d\x46\x88\xef\xf0\x59\xc2\xba\x84\x5d\x98\x20\x7d\x78\x96\xc4\x47\x4e\x84\x8e\x9f\x39\x97\x9b\x0a\x66\x70\x28\xe0\x1f\xa3\x74\x7e\xb9\xa9\xca\xe7\xa5\x05\xed\x89\x5e\x39\xe7\x45\x31\xb8\x4b\xcc\x48\xff\x14\xd9\xff\x3f\x00\x00\xff\xff\xcc\x10\xac\xa9\x74\x0c\x00\x00")

func genClientGrpcClientGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_genClientGrpcClientGotemplate,
		"gen/client/grpc/client.gotemplate",
	)
}

func genClientGrpcClientGotemplate() (*asset, error) {
	bytes, err := genClientGrpcClientGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gen/client/grpc/client.gotemplate", size: 3188, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xed, 0xd, 0xc9, 0x6d, 0x30, 0xec, 0xfd, 0x9b, 0x84, 0xbf, 0x44, 0xdd, 0xf2, 0xec, 0x84, 0x10, 0xa7, 0xf1, 0xc0, 0x89, 0x87, 0xec, 0x16, 0x4e, 0x7b, 0x9e, 0x4d, 0x62, 0x8, 0x9c, 0x72, 0x4c}}
	return a, nil
}

var _genClientHttpClientGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcb\xb1\x0d\xc2\x30\x10\x05\xd0\x3e\x53\x5c\x1d\x09\xdf\x10\x34\x29\x91\xc8\x02\x56\xf8\x98\x88\xc3\x67\x9d\x3f\x95\xe5\xdd\x69\x18\xe0\x8d\xa1\xab\xdc\x01\x29\x7e\x61\x7c\x7b\xd7\x82\x5a\xfc\x7d\x52\x5f\x64\x63\xe4\xda\x9b\x07\x95\xf8\x34\xcb\x44\x2a\x2e\x4f\x0f\x39\xfc\x01\x59\x75\xce\x65\x8c\x23\x9b\x49\xda\xf6\xfd\xb6\xc1\x1a\x22\x5d\xed\x44\xe5\xfe\x27\x92\xe6\x5c\x7e\x01\x00\x00\xff\xff\x0b\x3c\x4c\x9e\x69\x00\x00\x00")

func genClientHttpClientGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_genClientHttpClientGotemplate,
		"gen/client/http/client.gotemplate",
	)
}

func genClientHttpClientGotemplate() (*asset, error) {
	bytes, err := genClientHttpClientGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gen/client/http/client.gotemplate", size: 105, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xa1, 0xf0, 0x36, 0xf9, 0x16, 0xea, 0x9d, 0x4e, 0x73, 0x64, 0xc5, 0xad, 0xb3, 0x1b, 0x4, 0xe, 0xd8, 0xc8, 0x1e, 0xf7, 0x7a, 0x39, 0x40, 0x4c, 0xb2, 0x12, 0x83, 0x35, 0xca, 0x82, 0x6f, 0xd0}}
	return a, nil
}

var _genEndpointsGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\xcf\x6f\xdc\xba\x11\x3e\x8b\x7f\xc5\x64\xe1\xc2\xbb\x81\x2c\xdf\x1d\xec\xa1\x4d\xdc\xd6\x40\xe2\x04\xb1\xdb\x1e\x82\x20\xe0\x4a\xb3\x2b\xc2\x14\xc9\x90\xd4\xfe\xa8\xa0\xff\xbd\x18\x52\xd2\x6a\xb3\xb2\xeb\xf7\x8e\x0f\xef\x60\xd8\x26\x87\xc3\x6f\xbe\x6f\x66\x38\xba\xbe\x86\xf7\xba\x40\xd8\xa0\x42\xcb\x3d\x16\xb0\x3a\x80\xb7\xb5\x73\x19\x7c\xf8\x0c\xf7\x9f\x1f\xe1\xf6\xc3\xdd\x63\xc6\xae\xaf\xe1\x2b\xda\x5a\x29\xa1\x36\xd1\x00\x76\x42\x4a\xd0\x5b\xb4\x3b\x2b\x3c\x82\x2f\x85\x83\xb5\x90\x18\x8c\xff\x8d\xd6\x09\xad\x6e\xa0\x69\xb2\xee\xef\xb6\x1d\x6d\xc0\x07\xee\x71\xbc\x4b\xff\xb7\x2d\x63\x86\xe7\x4f\x7c\x13\x10\x31\xb2\x7f\xec\xdd\x42\xae\x95\xe7\x42\x39\xa8\xd0\x97\xba\x70\xe0\x35\x54\xfc\x09\x41\xa8\x42\x6c\x45\x51\x73\x09\xa8\x0a\xa3\x85\xf2\x0e\xd6\x56\x57\xe0\xd0\x6e\x45\x8e\x2e\x25\x4f\x16\x7f\xd6\xe8\x3c\x70\x55\x80\x45\x67\xb4\x72\x08\xfe\x60\x30\x78\x22\x53\x0a\x42\x3b\x3c\x7a\x49\x81\x3b\xd8\xa1\x94\xf4\x1b\x55\xae\x0b\xb4\x8e\x1c\x90\xbf\x02\xbb\xff\xd7\xda\x76\x07\x83\xb7\x34\x2c\x70\x22\x67\x0d\xba\xb6\xe0\x6a\x63\xb4\x25\x72\xbd\xe5\xca\xd1\xdf\x74\x9d\xe0\x52\xfc\x97\x7b\xa1\x15\x79\x5b\x6b\x5b\x71\xef\x32\xc6\x44\x15\x2c\xe6\x2c\x99\xad\x2b\x3f\x63\xc9\x8c\x22\xc7\xbd\x9f\x31\x96\xcc\x36\xc2\x97\xf5\x2a\xcb\x75\x75\xbd\xd1\x57\x4f\xc2\x5f\xd3\x4f\x8f\x98\x4c\xcc\x0a\x66\x4d\x93\x7d\xf9\xdb\x5d\x70\xf4\x85\xfb\x12\xae\xda\x76\xc6\x16\x81\xd0\xdb\x81\xa2\x5c\x4b\x89\xb9\x77\x3d\x56\x5f\x8e\x42\x07\x5f\x72\x0f\xb9\xae\x0c\x05\xc6\x15\xf0\xa2\xe8\xf9\xcc\xe0\xce\x5f\x3a\x72\x56\x21\x57\x9e\xe8\x5b\x21\xd4\x0e\x0b\xe2\x89\x43\x89\xd2\xa0\x05\xe7\x6d\x9d\xfb\x94\xb6\xbb\xab\xa6\x6f\x12\xca\x6b\xe0\xe4\xce\x09\xb5\x91\x08\x86\x5b\x5e\xa1\x47\x4b\xa9\x44\xeb\x77\x0a\x78\x54\xc8\xa6\x20\xfc\xa5\xa3\xcb\xd6\xb5\x0c\x4c\xaf\x6b\x95\x13\x8b\x1d\x64\x85\x44\xb4\x06\x6d\x42\x46\x83\xa6\xb3\x06\xed\x55\x7f\x21\x39\x5c\x71\x27\x5c\x06\x7f\xd7\x16\x70\xcf\x2b\x23\x31\x85\x83\xae\xa1\x12\x9b\xd2\x83\xe1\x8e\x54\x1e\x51\x45\x00\x87\x8b\xe2\x3d\xc6\xea\xa2\xce\x31\xd0\xc0\x15\x94\xde\x9b\xec\x9f\x5c\x15\x92\x30\xee\x84\x2f\x01\x79\x5e\x76\xc9\x0a\xf3\xfe\xf6\x05\xec\x84\xc5\x02\x6a\x13\x9d\x3a\x83\xb9\x58\x8b\x1c\x0c\xf7\x65\x06\xf3\xbb\x80\x4f\x38\xf2\xbf\xe2\x2b\x79\x00\x0e\x95\x70\x3e\x26\x3a\x14\xe8\xc4\x46\xd1\x51\xa1\xb6\xfa\x09\x03\x95\x0f\x51\x96\xa1\x30\x02\x44\x3c\x15\x3b\x8a\x41\x2e\x7a\x26\xb3\xc5\x98\xdd\x5c\x0a\x54\xfe\x94\xdd\x91\x70\xc7\x1a\x93\x07\xaa\xc4\xe8\x0e\x8b\x97\x64\xa4\x6a\x88\x5c\x09\x62\xb8\xc2\x98\x56\x47\xbc\x42\x79\xb4\x6b\x4e\x09\x35\xad\x04\x39\x1b\x2e\x9b\xae\xf3\xda\xc5\x8e\xd4\x15\xd6\x75\xd0\xe1\x1e\x77\xef\xbb\x78\x72\x5d\xad\x84\x0a\x3c\x55\x1d\xc4\x91\xb0\x69\xd7\x0d\x7c\x6d\x15\x88\x90\xc9\x04\x30\xe7\x52\xa2\x8d\xc9\xdc\x81\xcd\x58\x08\xe7\x8c\xd0\x86\x35\x8d\xe5\x6a\x83\x70\x21\xe0\x66\x09\x59\x6f\xff\x29\x8a\xd1\xb6\x2c\x69\x9a\x0b\x91\xdd\xf3\x0a\xdb\xb6\x3f\x0f\x00\x43\x10\x59\xbf\xc8\x9a\xe6\x8a\x56\xdb\x96\xb5\x8c\x51\xba\xc1\x3d\xee\x86\x2b\xe7\x5d\xf9\x81\x59\x65\x4d\x33\x5c\x14\x1d\x3f\x04\x4d\x17\x23\x80\x0d\x63\xc9\x28\x05\xa0\xd0\x15\x17\x2a\x63\xc9\x96\x5b\xea\x2e\x2f\xe3\xa6\x96\xc1\x92\xa4\x69\x1e\xf5\x47\xbd\x43\x0b\xe7\x21\x2c\xe1\x13\x7f\xc2\x89\xe0\x7a\xa0\x0b\xba\x24\xc6\x93\x2c\x18\x4b\x8e\xaa\xdd\x2c\x8f\x40\x9b\x57\x43\x39\xbb\xe8\x86\x68\x7c\x01\x62\x3a\x02\xd0\x32\x96\x74\x42\x0f\x38\x88\xe6\x71\x95\xbc\x42\xcb\xa0\xca\x7c\x94\x08\x0b\x18\x01\x9b\xe7\x7e\x0f\x5d\xbb\xce\xde\xc7\xdf\x29\x15\xdd\xdb\xa0\xd9\x3f\x34\x99\x11\xce\xaf\xf1\x31\x7a\x3c\x98\x5e\xc0\x05\xcc\xcf\x8d\xe2\x2b\x35\xb2\x4a\x01\xad\xd5\x76\x01\x0d\x4b\x92\xfe\x15\x0b\x8b\x04\x18\xb3\x29\x35\x72\xbf\x27\x0c\x0b\x96\x24\x62\x1d\x4c\xdf\x2c\x41\x09\x19\x7c\xf4\x9c\x28\x21\x83\x1b\x96\x24\x2d\x1b\x56\xfb\x1b\xb2\xd7\x60\x5b\xa4\xe4\x85\x98\xee\x49\x27\x72\x29\x47\x4e\x18\x0e\xbd\xf1\xc2\x63\x60\x38\x96\xc7\x98\xf4\x0b\x8f\x53\xbc\x47\xe2\x9f\x4d\xb8\x58\x13\xe3\xb3\xa7\x65\x71\x56\x6b\x27\xc1\x93\xef\x69\xe9\xfa\xa1\x61\x68\x55\x0d\x09\x35\x8c\x0f\xa3\xe5\x28\xc2\x48\x1d\xf2\xfe\x93\x22\xea\x7c\x4c\x71\x78\x96\x04\xe1\xdc\x76\x10\xd4\x65\xbf\x24\x57\x40\x14\xad\x26\xb4\x9c\x52\x33\xea\x39\xec\x6c\x3b\x91\xe2\x72\x7b\x2c\x90\xb1\x66\xff\xb1\xdc\xfc\x55\xca\xdb\x7d\x8e\xc6\xc3\xce\x72\xe3\xe2\x6b\x36\xb0\xb7\x16\x28\x0b\x7a\xca\xbb\x36\x78\x6c\x3b\x41\xde\xf0\x0c\x4c\xcc\x27\xd9\x27\x51\x14\x12\x77\xdc\xc6\x31\xf1\x5f\xae\x1f\x1c\x69\x64\x32\x46\x1e\xa8\x9b\xd3\x0b\xe5\xc9\x79\x35\x58\x87\x27\x18\xb7\x68\x0f\x83\x94\x54\x56\xd4\xac\xfb\xa1\x84\xfc\x7d\x36\xf4\x40\xd3\x23\x95\x8e\xde\x88\x9c\x2b\x1a\x50\xe8\x59\xc7\x82\x8e\xad\x0e\xa0\x48\x83\x38\xb8\xe0\x3e\x97\x75\x81\x45\x9c\x19\x57\x48\x10\x28\x66\x83\x45\x76\xc6\xc6\xfc\x88\x29\x85\xd9\x83\xe7\xbe\x76\xb3\x14\x66\x5f\x84\xda\xcc\x16\xac\x6f\x0f\x6f\x47\xfd\xe1\xb9\xf3\x30\xc1\x4a\x7a\x44\x93\x65\x99\xf3\x56\xa8\x4d\x48\x27\xa1\xba\xe5\x9b\x25\x54\xdc\x7c\x8b\x5b\xdf\x23\xfd\x4d\xdb\x84\x06\x79\x05\xff\xaf\x7d\x25\xc9\x6c\x94\x51\xb3\x1b\x68\xda\xb4\x3b\x3a\xea\x93\xa4\xc6\x0f\x82\x12\xd2\x37\xb8\x1c\x60\x35\xb1\x8d\xfc\x48\x41\x3f\xd1\x76\x0f\xec\x1b\xee\xbf\xbf\x83\x37\xfa\x29\xa6\xa2\xe1\x4a\xe4\xf3\x75\xe5\xb3\x07\x63\x85\xf2\xeb\xf9\xec\xb6\x77\x31\x28\x78\xf9\x17\x77\x09\x85\x46\x07\x4a\x7b\xc0\xbd\x70\xfe\x1d\x38\xc4\xb1\xf0\x43\xee\xb8\x6c\xa3\x67\x04\x6a\xb1\xe8\x9a\x54\x81\x12\x3d\xce\x7b\x04\x61\xef\x18\x80\x50\xf9\x11\xfe\x40\xdf\xeb\x89\x12\xeb\xe0\x62\xb9\x84\x13\xca\xba\x4a\x9b\x6c\xb5\xb0\x1c\x21\x9f\x4f\x9a\x2c\xfa\xd2\x3b\xa1\x3c\x96\xdd\x47\xbe\x42\x89\xc5\x31\x1b\xe2\x37\xd6\x06\x7d\x9f\xbb\xe3\xc1\x39\xa6\xf0\xae\x44\x35\xec\xea\x51\xba\x76\xce\x62\xd6\xa5\xb1\xca\xba\x42\xa8\xa3\x31\xc4\x0f\x37\x1e\xbf\xfe\x44\x4e\xf3\xa3\x15\x79\x1c\xec\x47\x18\x4a\x91\x97\xe1\xa8\x43\x35\x05\xa1\x1b\x9a\xba\xd3\xfd\xc8\xa8\x6d\x37\x32\x9d\x47\x15\xda\x6d\x4c\xe0\xf4\xbc\x33\x4f\x34\x6b\xf6\x5c\x5c\xbf\xbb\x37\x9d\x81\x4a\xbb\x38\x03\xe3\x16\x73\x14\xdb\x38\x5c\x87\x10\x7f\xf9\x66\xc9\xe0\x01\x71\x70\x33\xf2\x12\x36\xfa\x99\x7f\xa8\x7b\x02\x4a\x19\x59\xa0\xe7\x42\x86\xf9\xbc\x2f\xa7\xf0\xe9\xd7\x7d\x57\x70\x29\xfc\x21\x7b\xa9\x85\x9c\xc4\x3e\xee\x24\xbf\x99\xd1\x3f\xfb\xcc\x1f\xa7\xcf\x9c\x1c\x4b\xa7\x87\xc0\xe7\xda\xce\xff\x02\x00\x00\xff\xff\xea\x8c\xe5\x23\x01\x12\x00\x00")

func genEndpointsGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_genEndpointsGotemplate,
		"gen/endpoints.gotemplate",
	)
}

func genEndpointsGotemplate() (*asset, error) {
	bytes, err := genEndpointsGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gen/endpoints.gotemplate", size: 4609, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdd, 0x28, 0x78, 0xac, 0x5, 0x3c, 0x60, 0x1a, 0xeb, 0x12, 0x1b, 0x3e, 0x5a, 0x94, 0x6c, 0xee, 0x8a, 0x6b, 0xd7, 0xde, 0x58, 0xf8, 0xb3, 0xd9, 0xfa, 0xfa, 0xeb, 0x24, 0x8, 0x98, 0x2c, 0x98}}
	return a, nil
}

var _genTransport_grpcGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x56\xc1\x6e\xdb\x38\x10\x3d\x8b\x5f\x31\x6b\x14\x0b\xab\x70\xa8\x3d\x07\xc8\xa5\x49\x9b\x16\xdd\x26\x86\xd7\xed\x1e\x8a\xa2\xa0\xa5\xb1\x44\x58\x22\x15\x92\x76\xe2\x25\xf4\xef\x8b\xa1\x24\x5b\x89\x1d\xc7\x87\x04\x16\xf9\x38\xf3\xe6\xbd\xe1\x48\x49\x02\xd7\x3a\x43\xc8\x51\xa1\x11\x0e\x33\x58\x6c\xc1\x99\xb5\xb5\x1c\x6e\xee\xe1\xee\x7e\x0e\x1f\x6f\xbe\xcc\x39\x4b\x12\x98\xa1\x59\x2b\x25\x55\xde\x02\xe0\x51\x96\x25\xe8\x0d\x9a\x47\x23\x1d\x82\x2b\xa4\x85\xa5\x2c\x31\x80\x7f\xa0\xb1\x52\xab\x4b\xf0\x9e\x77\xbf\x9b\x66\xb0\x01\x37\xc2\xe1\x70\x97\x9e\x9b\x86\xb1\x5a\xa4\x2b\x91\x07\x46\x8c\xf0\xf3\x3e\x2c\xd4\x46\x6f\x64\x86\x16\x2c\x9a\x0d\x9a\x0b\x2b\x33\x84\x85\x54\x99\x54\xb9\x85\xa5\x36\xe0\x0a\x84\x7c\x36\xbd\x06\x67\x84\xb2\xb5\x36\x2e\x70\xf9\xe2\x60\xed\x64\x29\xff\x43\x1b\x20\xbb\xdd\x24\x37\x75\xca\xff\x09\xe1\x38\x63\xb2\xa2\x45\x18\xb3\x68\xa4\xd0\x25\x85\x73\xf5\x88\x45\xa3\x54\x2b\x87\x4f\x6e\xc4\x58\x34\xca\xb5\xce\x4b\xe4\xb9\x2e\x85\xca\xb9\x36\x79\x08\x91\x54\xe8\x44\x26\x9c\x20\x0c\x2d\xec\x32\xc0\x28\x97\xae\x58\x2f\x78\xaa\xab\x24\xd7\x17\x2b\xe9\x12\xfa\x7b\x4e\x81\xb2\x0c\x70\x37\xfa\x0e\x1f\x2d\xf9\x92\xa4\xda\xd0\x3f\xe5\x8c\x48\x03\x83\x5e\x11\x22\x2d\x53\x64\x51\xbd\x80\x91\xf7\x7c\xfa\xe1\x4b\x60\x3f\x15\xae\x80\x8b\xa6\x19\xb1\x38\xc8\xf7\x4d\xac\xf0\x76\x36\xbd\x6e\x8b\x84\x4a\xac\xd0\x82\x00\x8b\x0e\xf4\x12\x50\x65\xb5\x96\xca\x59\x10\x1b\x21\x4b\xb1\x28\x11\x04\xed\x07\x15\xbd\xe7\x5d\x1a\x7e\x27\x2a\x6c\x9a\x5e\xa9\xe5\x5a\xa5\x2f\x22\x8f\xf7\xa1\x3e\xf6\xbf\x26\xa0\x6b\x27\xb5\xb2\xc0\x39\x7f\x26\x4b\xa7\xf9\x7d\xd8\x8e\xa1\x5e\xf0\x57\x72\x81\x67\x91\x1d\x60\x2d\x5c\x5e\xc1\xcf\x5f\xaf\x07\xf3\x2c\x8a\x8e\xed\x7e\xc0\xa5\x36\x38\xee\x8d\x9a\xeb\xeb\xd6\xd5\x78\xc2\xa2\xe6\x65\x8e\x2b\x10\x75\x8d\x2a\x1b\x3f\x5b\xde\x95\xc3\x39\x8f\x59\x64\xd0\xad\x8d\x82\x3f\x29\x5b\x9b\xc3\x07\x7b\xbc\x87\xb9\xfe\x5b\x3f\xa2\x81\x67\x25\x41\xd3\xb0\xc8\x7b\x23\x54\x8e\xf0\x4e\x52\x21\xbb\xfd\x6f\xe8\x0a\x9d\x59\x42\x44\xde\xf7\xc7\xdf\xc9\x4e\x8b\x4b\x78\x5e\xd2\x1d\x3e\x76\xaa\xb3\x28\x8a\x76\xca\x73\xef\x77\x47\x7a\x13\x26\x84\xb8\xc1\x54\x67\xc1\xac\x01\x62\x86\x0f\x6b\xb4\x2d\xe0\xa3\x3a\x0a\xb0\xb5\x56\x16\x03\xe2\x99\x12\x9c\x73\x5a\x24\xed\xbc\xbf\xa0\x2e\x22\xe6\x0d\x6b\x42\xcb\xed\x05\x01\x59\xd5\x25\x56\x48\x5d\x41\x17\xcf\xfb\x5b\x1d\xa4\x38\xee\xb5\x54\x0e\xcd\x52\xa4\xc8\xdc\xb6\xc6\x61\x1c\xeb\xcc\x3a\x75\xe0\xd9\xdb\xfa\x1d\x91\x0f\xe0\x85\x7e\x9f\x85\xca\x4a\x34\x6c\x4f\xbe\x65\xde\x85\x09\xb3\x64\x90\xdd\xe9\x7d\x21\xe7\xd7\xf0\x26\xd5\x70\x8b\xc6\x16\xde\xef\x53\xc5\xfb\xf0\x3b\xf6\xe3\xd4\x3d\x41\x37\x83\x78\xd7\xb5\x13\x30\xf8\x00\xef\xc3\xbd\xd9\xe3\x3b\x47\xe7\xdb\xba\x27\x15\xc3\xf8\x10\xd4\xba\x3a\x40\x4d\x00\x8d\xd1\x94\x9c\x45\xbf\x29\x74\x1d\x56\x88\x36\xf5\xd4\x81\x9e\xed\x95\xa2\x6e\x21\x6e\x81\x4b\xcc\x22\xb9\x0c\x87\xfe\xb8\x02\x25\x4b\x0a\xd5\xdf\x10\x25\xcb\x10\x2f\x5c\xb4\x6e\xcd\x60\xcd\xcf\xa1\x16\x4f\xe8\x38\x6b\x98\xf7\xad\x51\x64\x53\x27\x75\xdb\xd5\x6f\xeb\x9c\x24\x70\xea\x02\x80\xa4\x81\xf7\xe2\x9d\xd0\x1e\xe8\x10\x9f\xc8\x28\x57\x08\x47\x36\x6c\xd0\xd0\xb8\x0c\x8d\xde\x0e\xc9\xc3\x7e\x33\x5d\x64\xa7\x41\xc0\xda\xa2\xb9\xc8\x74\x25\xa4\x3a\x05\xe6\x30\x35\xb2\x12\x46\x96\x5b\x3a\xb2\x5c\x97\x20\x55\x98\xd4\x83\x99\x7b\xaa\x8e\xf1\xef\xc3\x2e\xa1\x5a\x66\xf8\xb0\xef\x4a\x4f\x2d\x31\x78\x1a\x5a\x4f\x2d\x75\x79\xd5\x9f\x39\x66\xcf\x41\x7b\x0d\xfc\x7c\x38\xe1\x54\x3b\x5e\xce\x72\xea\xe4\x24\x3a\x6a\x55\x7b\xa2\x87\xbc\xe6\xd5\xdb\x2e\x74\x29\x82\x67\x27\x9c\xad\xcb\xed\x59\x56\x9d\x2c\xe4\x98\x57\x3b\x06\x67\x9a\x65\x6b\x52\xb1\x3f\x75\xde\x6d\x1a\xf8\x65\xeb\x63\x86\x7d\xc6\xb2\x46\x63\x59\x5b\xc3\xc1\xdb\xf2\xf8\x2c\xaa\xb2\x1d\x92\x7f\xbb\x89\x5f\x02\x88\x2e\x4d\xd4\xd5\x04\x36\x81\x72\x68\x82\x2a\x0b\x33\x42\x2e\x61\x33\x9c\x19\xed\x07\x0e\xc2\x0a\xb7\xc1\xed\x2c\xa3\x6f\x52\xed\x0a\x92\xb8\xcf\x42\x03\xba\x12\x0e\xc6\xab\x18\x1e\x0b\x99\x16\x01\x5a\x96\x50\x92\x5d\x5d\x14\xa1\xb2\xf0\xd2\xa1\xcf\x38\x7e\x2d\x94\x56\x32\x15\xe5\x67\x14\x19\x9a\xaf\xb8\xa5\xcf\x1f\xd7\x25\xb2\xba\x6d\x19\xe9\x20\x15\x0a\x16\xd8\x87\x48\x53\xb4\x16\x33\xca\x8d\xd2\x15\x68\xba\xcc\xb4\x4f\x52\x5c\xed\x6a\xfd\x57\xba\xe2\x87\x28\xd7\xd8\x8e\x44\xaa\xf5\xe7\x5f\xbf\xe2\x37\x81\xaf\xb0\x1b\xaf\xe2\x7d\x84\xf0\x6e\x65\x00\x27\x03\xf5\x1f\x89\xfd\x35\xfd\x6e\xca\xaf\xb8\x25\x73\xf8\x2d\xba\xf1\xe8\xb2\x16\xae\x18\xc5\x21\xe4\xb9\xa1\xe6\xfd\x4d\x0b\x91\x46\xb7\xd3\xd9\xf5\x74\x76\x3f\xbf\xff\xf0\xfd\xd3\x68\xdf\x4b\xa9\x7b\x62\x0d\xfb\x3f\x00\x00\xff\xff\x20\x2c\x02\x10\x4a\x0c\x00\x00")

func genTransport_grpcGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_genTransport_grpcGotemplate,
		"gen/transport_grpc.gotemplate",
	)
}

func genTransport_grpcGotemplate() (*asset, error) {
	bytes, err := genTransport_grpcGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gen/transport_grpc.gotemplate", size: 3146, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8, 0xc6, 0x61, 0xae, 0xd3, 0x28, 0xfc, 0x14, 0xf3, 0x39, 0x2f, 0x9b, 0x6, 0xac, 0xb8, 0xdf, 0xed, 0xd2, 0x81, 0x8f, 0xbe, 0x8a, 0x51, 0x48, 0x9f, 0x2e, 0x2a, 0xb0, 0x1c, 0x2f, 0xaf, 0xdb}}
	return a, nil
}

var _genTransport_httpGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xcb\xb1\x0d\xc2\x30\x10\x05\xd0\x3e\x53\x5c\x1d\x09\xdf\x1a\x29\x91\xe2\x05\xac\xf0\x31\x08\x93\xb3\xce\x1f\x1a\xeb\x76\xa7\x61\x80\x37\xa7\xae\xb2\x03\x52\xed\x42\xff\x8c\xa1\x15\x67\xb5\xd7\x93\xfa\x20\x3b\xbd\x9c\xa3\x9b\x53\x89\x77\x6f\x85\x18\xa9\x9a\xdc\xcd\xe5\xb0\x1b\x64\xd5\x88\x65\xce\xa3\xb4\x26\x69\xcb\xf9\xba\xa1\x75\x78\xda\xe1\x5f\x78\xfe\x1b\x49\x11\xcb\x2f\x00\x00\xff\xff\xdd\x3a\x4a\x8f\x6a\x00\x00\x00")

func genTransport_httpGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_genTransport_httpGotemplate,
		"gen/transport_http.gotemplate",
	)
}

func genTransport_httpGotemplate() (*asset, error) {
	bytes, err := genTransport_httpGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "gen/transport_http.gotemplate", size: 106, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x52, 0x57, 0x56, 0xc6, 0xb4, 0xe5, 0x1f, 0xf4, 0x1d, 0xa5, 0xda, 0x23, 0xea, 0x8f, 0xfb, 0xff, 0xae, 0x4b, 0x12, 0xe4, 0xf6, 0xbf, 0x11, 0xa6, 0x4, 0x83, 0x53, 0xfd, 0xbf, 0xce, 0x4a, 0x47}}
	return a, nil
}

var _serviceGotemplate = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xc1\x0d\x80\x20\x0c\x05\xd0\xbb\x53\xf4\x4c\xa2\x1d\xc6\x09\x88\x7c\xab\x11\xa9\x69\xeb\x89\xb0\x3b\xaf\x77\x4e\xb4\x03\x24\xba\x86\xfd\xee\x2c\x68\xa2\xcf\x1d\x7c\xe5\x56\x2a\x8c\x03\xef\x57\x73\xc0\x37\x51\x3a\xd5\xe8\xd0\x02\x4a\x3c\xc6\x32\x03\x00\x00\xff\xff\xd6\x21\xab\x2e\x3e\x00\x00\x00")

func serviceGotemplateBytes() ([]byte, error) {
	return bindataRead(
		_serviceGotemplate,
		"service.gotemplate",
	)
}

func serviceGotemplate() (*asset, error) {
	bytes, err := serviceGotemplateBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "service.gotemplate", size: 62, mode: os.FileMode(0644), modTime: time.Unix(1464111000, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x1e, 0xcb, 0xd5, 0x72, 0x80, 0xc6, 0xf9, 0x82, 0x4b, 0xe0, 0x8b, 0x90, 0xb8, 0x9b, 0xbc, 0x5d, 0x8d, 0x12, 0xd4, 0x8e, 0x54, 0xf6, 0x72, 0xcb, 0xef, 0xf5, 0x12, 0xd0, 0xe1, 0xb8, 0x41, 0xc8}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"gen/client/grpc/client.gotemplate": genClientGrpcClientGotemplate,
	"gen/client/http/client.gotemplate": genClientHttpClientGotemplate,
	"gen/endpoints.gotemplate":          genEndpointsGotemplate,
	"gen/transport_grpc.gotemplate":     genTransport_grpcGotemplate,
	"gen/transport_http.gotemplate":     genTransport_httpGotemplate,
	"service.gotemplate":                serviceGotemplate,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"gen": &bintree{nil, map[string]*bintree{
		"client": &bintree{nil, map[string]*bintree{
			"grpc": &bintree{nil, map[string]*bintree{
				"client.gotemplate": &bintree{genClientGrpcClientGotemplate, map[string]*bintree{}},
			}},
			"http": &bintree{nil, map[string]*bintree{
				"client.gotemplate": &bintree{genClientHttpClientGotemplate, map[string]*bintree{}},
			}},
		}},
		"endpoints.gotemplate":      &bintree{genEndpointsGotemplate, map[string]*bintree{}},
		"transport_grpc.gotemplate": &bintree{genTransport_grpcGotemplate, map[string]*bintree{}},
		"transport_http.gotemplate": &bintree{genTransport_httpGotemplate, map[string]*bintree{}},
	}},
	"service.gotemplate": &bintree{serviceGotemplate, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
